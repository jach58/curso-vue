Se crea una instancia de vue

new Vue({
   el: "main",
   data:{
   nombre: "Juan",
   texto: "Hola soy un texto"
    }
});


v-text="texto"
v-model para el two way binding

Condicionales
v-if, v-if-else, v-else
<strong v-if="nota && nota >= 5 && nota <=9">Tu nota es mayor a 5</strong>
<strong v-else-if="nota && nota == 10">Excelente</strong>
<span v-else>Has suspendido</span>

Directiva For 

<h1>Listado de Peliculas(array)</h1>
<ul v-for="pelicula of peliculas">
    <li>{{pelicula}}</li>
</ul>


Eventos
<button @click="crearPelicula">Crear Pelicula</button>
<button v-on:click="borrarPelicula">Borrar Pelicula</button>

Hacer el prevent en un submit
<form @submit.prevent="crearPelicula()"></form>;

methods:{
        crearPelicula(){
            this.peliculas.push(this.peliculaNueva);
            this.peliculaNueva = null;
        },
        borrarPelicula(index){
            this.peliculas.splice(index,1);
        }
    }

Propiedades computadas
- Tmb modificar una propiedad para hacer la logica en el modelo y no vista
-Nos permite procesar la informaci√≥n que hay en una propiedad y devolver un valor

<h1>{{nombreYapellidos}}</h1>

computed:{
        nombreYapellidos(){
            let date = new Date();
            let year = date.getFullYear();
            return `${this.nombre} ${this.apellido} - Nota: ${this.nota} - ${year}`;
        },


-Filtros

vue2-filters libreria

Vue.filter('mayusculas',value => value.toUpperCase());


-Varias instancias

const vue1 = new Vue({
    //codigo
    el:'#app'
});

const vue2 = new Vue({
    //codigo
    el:'#app2'
});

const vue2 = new Vue({
    //codigo
    el:'#segundo'
});


-Binding de Classes

v-bind:class="{like:index==1}"
tambien
:class="{like:index==confirmado}"

-Peticiones Ajax,Http
//este metodo es parecido al OnInit en angular
mounted(){
    
}

axios.get('https://jsonplaceholder.typicode.com/posts')
            .then(respuesta=>this.posts =respuesta.data);

-Componentes

Vue.component('articulos',{
    template: `
    <div class="componente-articuloss">
        <h1>Componente {{titulo}}</h1>
        <h1>Lista de Posts por ajax</h1>
            <ol v-if="posts">
                <li v-for="post of posts">
                    {{post.title}}
                </li>
            </ol>
        <span v-else>Cargando...</span>
    </div>
    `,
    mounted(){
        axios.get('https://jsonplaceholder.typicode.com/posts')
            .then(respuesta=>this.posts =respuesta.data);
    },
    data(){
        return{
            titulo: 'Articulos',
            posts: null,
        }
    }
});


-props
nomas de un elemento root por eso se encierra con un div todo 
el template

<frutas :objeto="superFruta"></frutas>


Vue.component('frutas',{
    props:['objeto'],
    template: `
    <div class="componente-frutas">
        <h1>Componente Frutas</h1>
        <h4>{{objeto.nombre}}</h4>
    </div>
    `,
    mounted(){
        console.log(this.objeto);
    }
});

-plantilla en linea

se pone la plantilla en la vista por ejemplo:
<frutas :objeto="superFruta" inline-template>
            <div class="componente-frutas">
                <h1>Componente Frutas</h1>
                <h4>{{objeto.nombre}}</h4>
            </div>
        </frutas>

y se le indica al componente con inline-template


-componentes dentro de componentes 

ejemplo: luego en la vista llamariamos al padre con <padre></padre>

Vue.component('padre',{
    template:`
        <div>
            <h1>Componente Padre</h1>
            <div>
                <hijo></hijo>
            </div>
        </div>
    `,
});

Vue.component('hijo',{
    template:`
        <p style="background:yellow">Soy un parrafo  en el componente hijo</p>
    `,
});

-Componentes dinamicos

con :is le bindeamos un componente, en este caso en la propiedad elegido tenemos
por default el de padre.

<button @click="elegido='articulos'">Cargar Articulos</button>
<button @click="elegido='padre'">Cargar Padre</button>
<button @click="elegido='hijo'">Cargar Hijo</button>

<component :is="elegido"></component>


****** CON VUE CLI *****
vue init webpack-simple webapp


-Router

instalamos VueRouter, luego

lo importamos al main.js 

import VueRouter from 'vue-router'

Despues lo usamos

Vue.use(VueRouter);

creamos las rutas en la constante routes

const routes = [
    {path:'/contacto',componente: Contacto},
    {path:'/home',componente: Home},
    {path:'/',componente: Home}
];

creamos la constante router

const router = new VueRouter({
    routes,
    mode:'history'
});


lo agregamos a la instancia


new Vue({
  el: '#app',
  router,   <-------------------------
  render: h => h(App)
})

Asi se crea un router link
<router-view></router-view>

asi se linkea
<li><router-link to="/home">Home</router-link></li>

si hay que pasarle un parametro se pone dos puntos al "to"
:to="{name:'restaurante-destacado', params:{id:16}}"


de esta forma lo traemos al componente

this.id_restaurante = this.$route.params.id;



